{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","key","id","onClick","onClickCallback","value","Board","squareList","squares","squareComponents","row","length","col","push","generateSquareComponents","console","log","generateSquares","currentId","App","useState","setSquares","turn","setTurn","winner","setWinner","checkForWinner","checkRow","checkCol","checkDiagonal","square","newSquares","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f2673280.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  \n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  const onSquareClick = () => {\n    props.onClickCallback(props.id);\n\n  }\n\n  return (<button \n    className=\"square\" key={props.id} onClick={onSquareClick}\n  >\n    {props.value}\n  </button>)\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // \n  let squareComponents = [];\n\n  for (let row = 0; row < squares.length; row += 1) {\n    // console.log(squares[row]);\n   \n    for (let col = 0; col < squares.length; col += 1){\n      squareComponents.push(<Square key={squares[row][col].id} id={squares[row][col].id} value={squares[row][col].value} onClickCallback={onClickCallback}/>);\n      // let squareJson = squares[row][i]\n      // console.log(squareJson.id, squareJson.value);\n    }\n    \n  }\n  // Complete this for Wave 1\nreturn squareComponents;\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react'\nimport './App.css'\nimport Board from './components/Board'\nimport { createPortal } from 'react-dom'\n\nconst PLAYER_1 = 'X'\nconst PLAYER_2 = 'O'\n\nconst generateSquares = () => {\n  const squares = []\n\n  let currentId = 0\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([])\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: ''\n      })\n      currentId += 1\n    }\n  }\n\n  return squares\n}\n\nconst App = () => {\n  const [squares, setSquares] = useState(generateSquares()); \n  const [turn, setTurn] = useState(PLAYER_1);\n  const [winner, setWinner] = useState('');\n\n  //const\n\n  // Wave 2\n  // You will need to create a method to change the square\n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n\n  const ChangeSquareValue = square => {\n    let newSquares = [];\n\n    for (let row = 0; row < squares.length; row++) {\n      newSquares.push([]);\n      for (let col = 0; col < squares.length; col++) {\n        if (squares[row][col].id === square && squares[row][col].value === \"\") {\n          newSquares[row].push({\n            id: squares[row][col].id,\n            value: turn\n          })\n\n          if(turn === PLAYER_1) {\n            setTurn(PLAYER_2)\n          } else {\n            setTurn(PLAYER_1)\n          }\n        } else {\n          newSquares[row].push(squares[row][col]);\n        }\n      }\n    }\n    setSquares(newSquares)\n  }\n \n    //complete in wave 3\n  \n  const checkRow = (turn) => {\n    for (let row = 0; row < 3; row++) {\n     if ((squares[row][0].value === turn) &&\n          (squares[row][1].value === turn) &&\n          (squares[row][2].value === turn)){\n            return true;\n          }    \n    }\n    return false;\n  }\n  const checkCol = (turn) => {\n    for (let col = 0; col < 3; col++) {\n     if ((squares[0][col].value === turn) &&\n          (squares[1][col].value === turn) &&\n          (squares[2][col].value === turn)){\n            return true;\n          }    \n    }\n    return false;\n  }\n  \n  const checkDiagonal = (turn) => {\n    if ((squares[0][0].value === turn) &&\n          (squares[1][1].value === turn) &&\n          (squares[2][2].value === turn)) {\n            return true;\n          } \n    if ((squares[0][2].value === turn) &&\n      (squares[1][1].value === turn) &&\n          (squares[2][0].value === turn)){\n            return true;\n          } \n      return false;\n  }\n  const checkForWinner = (turn) => {\n    if (checkRow(turn) || checkCol(turn) || checkDiagonal(turn)) {\n      setWinner(turn)\n    }\n  }\n  \n\n  const resetGame = () => {\n   setSquares(generateSquares());\n   setWinner('');\n\n    // Complete in Wave 4\n  }\n  if (winner === ''){\n    checkForWinner('X')\n    checkForWinner('O')\n  };\n  \n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <h1>React Tic Tac Toe</h1>\n        <h2>The winner is {winner} </h2>\n        <button onClick={resetGame}>Rest Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={ChangeSquareValue} />\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}